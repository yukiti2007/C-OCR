/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package Feature;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-10-11")
public class FeatureVector implements org.apache.thrift.TBase<FeatureVector, FeatureVector._Fields>, java.io.Serializable, Cloneable, Comparable<FeatureVector> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeatureVector");
    private static final org.apache.thrift.protocol.TField STRING_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("stringFeatures", org.apache.thrift.protocol.TType.MAP, (short) 1);
    private static final org.apache.thrift.protocol.TField FLOAT_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("floatFeatures", org.apache.thrift.protocol.TType.MAP, (short) 2);
    private static final org.apache.thrift.protocol.TField DENSE_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("denseFeatures", org.apache.thrift.protocol.TType.MAP, (short) 3);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final _Fields optionals[] = {_Fields.STRING_FEATURES, _Fields.FLOAT_FEATURES, _Fields.DENSE_FEATURES};

    static {
        schemes.put(StandardScheme.class, new FeatureVectorStandardSchemeFactory());
        schemes.put(TupleScheme.class, new FeatureVectorTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.STRING_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("stringFeatures", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
        tmpMap.put(_Fields.FLOAT_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("floatFeatures", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
        tmpMap.put(_Fields.DENSE_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("denseFeatures", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeatureVector.class, metaDataMap);
    }

    public Map<String, Set<String>> stringFeatures; // optional
    public Map<String, Map<String, Double>> floatFeatures; // optional
    public Map<String, List<Double>> denseFeatures; // optional

    public FeatureVector() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FeatureVector(FeatureVector other) {
        if (other.isSetStringFeatures()) {
            Map<String, Set<String>> __this__stringFeatures = new HashMap<String, Set<String>>(other.stringFeatures.size());
            for (Map.Entry<String, Set<String>> other_element : other.stringFeatures.entrySet()) {

                String other_element_key = other_element.getKey();
                Set<String> other_element_value = other_element.getValue();

                String __this__stringFeatures_copy_key = other_element_key;

                Set<String> __this__stringFeatures_copy_value = new HashSet<String>(other_element_value);

                __this__stringFeatures.put(__this__stringFeatures_copy_key, __this__stringFeatures_copy_value);
            }
            this.stringFeatures = __this__stringFeatures;
        }
        if (other.isSetFloatFeatures()) {
            Map<String, Map<String, Double>> __this__floatFeatures = new HashMap<String, Map<String, Double>>(other.floatFeatures.size());
            for (Map.Entry<String, Map<String, Double>> other_element : other.floatFeatures.entrySet()) {

                String other_element_key = other_element.getKey();
                Map<String, Double> other_element_value = other_element.getValue();

                String __this__floatFeatures_copy_key = other_element_key;

                Map<String, Double> __this__floatFeatures_copy_value = new HashMap<String, Double>(other_element_value);

                __this__floatFeatures.put(__this__floatFeatures_copy_key, __this__floatFeatures_copy_value);
            }
            this.floatFeatures = __this__floatFeatures;
        }
        if (other.isSetDenseFeatures()) {
            Map<String, List<Double>> __this__denseFeatures = new HashMap<String, List<Double>>(other.denseFeatures.size());
            for (Map.Entry<String, List<Double>> other_element : other.denseFeatures.entrySet()) {

                String other_element_key = other_element.getKey();
                List<Double> other_element_value = other_element.getValue();

                String __this__denseFeatures_copy_key = other_element_key;

                List<Double> __this__denseFeatures_copy_value = new ArrayList<Double>(other_element_value);

                __this__denseFeatures.put(__this__denseFeatures_copy_key, __this__denseFeatures_copy_value);
            }
            this.denseFeatures = __this__denseFeatures;
        }
    }

    public FeatureVector deepCopy() {
        return new FeatureVector(this);
    }

    @Override
    public void clear() {
        this.stringFeatures = null;
        this.floatFeatures = null;
        this.denseFeatures = null;
    }

    public int getStringFeaturesSize() {
        return (this.stringFeatures == null) ? 0 : this.stringFeatures.size();
    }

    public void putToStringFeatures(String key, Set<String> val) {
        if (this.stringFeatures == null) {
            this.stringFeatures = new HashMap<String, Set<String>>();
        }
        this.stringFeatures.put(key, val);
    }

    public Map<String, Set<String>> getStringFeatures() {
        return this.stringFeatures;
    }

    public FeatureVector setStringFeatures(Map<String, Set<String>> stringFeatures) {
        this.stringFeatures = stringFeatures;
        return this;
    }

    public void unsetStringFeatures() {
        this.stringFeatures = null;
    }

    /** Returns true if field stringFeatures is set (has been assigned a value) and false otherwise */
    public boolean isSetStringFeatures() {
        return this.stringFeatures != null;
    }

    public void setStringFeaturesIsSet(boolean value) {
        if (!value) {
            this.stringFeatures = null;
        }
    }

    public int getFloatFeaturesSize() {
        return (this.floatFeatures == null) ? 0 : this.floatFeatures.size();
    }

    public void putToFloatFeatures(String key, Map<String, Double> val) {
        if (this.floatFeatures == null) {
            this.floatFeatures = new HashMap<String, Map<String, Double>>();
        }
        this.floatFeatures.put(key, val);
    }

    public Map<String, Map<String, Double>> getFloatFeatures() {
        return this.floatFeatures;
    }

    public FeatureVector setFloatFeatures(Map<String, Map<String, Double>> floatFeatures) {
        this.floatFeatures = floatFeatures;
        return this;
    }

    public void unsetFloatFeatures() {
        this.floatFeatures = null;
    }

    /** Returns true if field floatFeatures is set (has been assigned a value) and false otherwise */
    public boolean isSetFloatFeatures() {
        return this.floatFeatures != null;
    }

    public void setFloatFeaturesIsSet(boolean value) {
        if (!value) {
            this.floatFeatures = null;
        }
    }

    public int getDenseFeaturesSize() {
        return (this.denseFeatures == null) ? 0 : this.denseFeatures.size();
    }

    public void putToDenseFeatures(String key, List<Double> val) {
        if (this.denseFeatures == null) {
            this.denseFeatures = new HashMap<String, List<Double>>();
        }
        this.denseFeatures.put(key, val);
    }

    public Map<String, List<Double>> getDenseFeatures() {
        return this.denseFeatures;
    }

    public FeatureVector setDenseFeatures(Map<String, List<Double>> denseFeatures) {
        this.denseFeatures = denseFeatures;
        return this;
    }

    public void unsetDenseFeatures() {
        this.denseFeatures = null;
    }

    /** Returns true if field denseFeatures is set (has been assigned a value) and false otherwise */
    public boolean isSetDenseFeatures() {
        return this.denseFeatures != null;
    }

    public void setDenseFeaturesIsSet(boolean value) {
        if (!value) {
            this.denseFeatures = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case STRING_FEATURES:
                if (value == null) {
                    unsetStringFeatures();
                } else {
                    setStringFeatures((Map<String, Set<String>>) value);
                }
                break;

            case FLOAT_FEATURES:
                if (value == null) {
                    unsetFloatFeatures();
                } else {
                    setFloatFeatures((Map<String, Map<String, Double>>) value);
                }
                break;

            case DENSE_FEATURES:
                if (value == null) {
                    unsetDenseFeatures();
                } else {
                    setDenseFeatures((Map<String, List<Double>>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case STRING_FEATURES:
                return getStringFeatures();

            case FLOAT_FEATURES:
                return getFloatFeatures();

            case DENSE_FEATURES:
                return getDenseFeatures();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case STRING_FEATURES:
                return isSetStringFeatures();
            case FLOAT_FEATURES:
                return isSetFloatFeatures();
            case DENSE_FEATURES:
                return isSetDenseFeatures();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof FeatureVector)
            return this.equals((FeatureVector) that);
        return false;
    }

    public boolean equals(FeatureVector that) {
        if (that == null)
            return false;

        boolean this_present_stringFeatures = true && this.isSetStringFeatures();
        boolean that_present_stringFeatures = true && that.isSetStringFeatures();
        if (this_present_stringFeatures || that_present_stringFeatures) {
            if (!(this_present_stringFeatures && that_present_stringFeatures))
                return false;
            if (!this.stringFeatures.equals(that.stringFeatures))
                return false;
        }

        boolean this_present_floatFeatures = true && this.isSetFloatFeatures();
        boolean that_present_floatFeatures = true && that.isSetFloatFeatures();
        if (this_present_floatFeatures || that_present_floatFeatures) {
            if (!(this_present_floatFeatures && that_present_floatFeatures))
                return false;
            if (!this.floatFeatures.equals(that.floatFeatures))
                return false;
        }

        boolean this_present_denseFeatures = true && this.isSetDenseFeatures();
        boolean that_present_denseFeatures = true && that.isSetDenseFeatures();
        if (this_present_denseFeatures || that_present_denseFeatures) {
            if (!(this_present_denseFeatures && that_present_denseFeatures))
                return false;
            if (!this.denseFeatures.equals(that.denseFeatures))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_stringFeatures = true && (isSetStringFeatures());
        list.add(present_stringFeatures);
        if (present_stringFeatures)
            list.add(stringFeatures);

        boolean present_floatFeatures = true && (isSetFloatFeatures());
        list.add(present_floatFeatures);
        if (present_floatFeatures)
            list.add(floatFeatures);

        boolean present_denseFeatures = true && (isSetDenseFeatures());
        list.add(present_denseFeatures);
        if (present_denseFeatures)
            list.add(denseFeatures);

        return list.hashCode();
    }

    @Override
    public int compareTo(FeatureVector other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetStringFeatures()).compareTo(other.isSetStringFeatures());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStringFeatures()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringFeatures, other.stringFeatures);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFloatFeatures()).compareTo(other.isSetFloatFeatures());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFloatFeatures()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floatFeatures, other.floatFeatures);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDenseFeatures()).compareTo(other.isSetDenseFeatures());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDenseFeatures()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denseFeatures, other.denseFeatures);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FeatureVector(");
        boolean first = true;

        if (isSetStringFeatures()) {
            sb.append("stringFeatures:");
            if (this.stringFeatures == null) {
                sb.append("null");
            } else {
                sb.append(this.stringFeatures);
            }
            first = false;
        }
        if (isSetFloatFeatures()) {
            if (!first) sb.append(", ");
            sb.append("floatFeatures:");
            if (this.floatFeatures == null) {
                sb.append("null");
            } else {
                sb.append(this.floatFeatures);
            }
            first = false;
        }
        if (isSetDenseFeatures()) {
            if (!first) sb.append(", ");
            sb.append("denseFeatures:");
            if (this.denseFeatures == null) {
                sb.append("null");
            } else {
                sb.append(this.denseFeatures);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        STRING_FEATURES((short) 1, "stringFeatures"),
        FLOAT_FEATURES((short) 2, "floatFeatures"),
        DENSE_FEATURES((short) 3, "denseFeatures");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // STRING_FEATURES
                    return STRING_FEATURES;
                case 2: // FLOAT_FEATURES
                    return FLOAT_FEATURES;
                case 3: // DENSE_FEATURES
                    return DENSE_FEATURES;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class FeatureVectorStandardSchemeFactory implements SchemeFactory {
        public FeatureVectorStandardScheme getScheme() {
            return new FeatureVectorStandardScheme();
        }
    }

    private static class FeatureVectorStandardScheme extends StandardScheme<FeatureVector> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, FeatureVector struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // STRING_FEATURES
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                                struct.stringFeatures = new HashMap<String, Set<String>>(2 * _map0.size);
                                String _key1;
                                Set<String> _val2;
                                for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
                                    _key1 = iprot.readString();
                                    {
                                        org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
                                        _val2 = new HashSet<String>(2 * _set4.size);
                                        String _elem5;
                                        for (int _i6 = 0; _i6 < _set4.size; ++_i6) {
                                            _elem5 = iprot.readString();
                                            _val2.add(_elem5);
                                        }
                                        iprot.readSetEnd();
                                    }
                                    struct.stringFeatures.put(_key1, _val2);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setStringFeaturesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // FLOAT_FEATURES
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map7 = iprot.readMapBegin();
                                struct.floatFeatures = new HashMap<String, Map<String, Double>>(2 * _map7.size);
                                String _key8;
                                Map<String, Double> _val9;
                                for (int _i10 = 0; _i10 < _map7.size; ++_i10) {
                                    _key8 = iprot.readString();
                                    {
                                        org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                                        _val9 = new HashMap<String, Double>(2 * _map11.size);
                                        String _key12;
                                        double _val13;
                                        for (int _i14 = 0; _i14 < _map11.size; ++_i14) {
                                            _key12 = iprot.readString();
                                            _val13 = iprot.readDouble();
                                            _val9.put(_key12, _val13);
                                        }
                                        iprot.readMapEnd();
                                    }
                                    struct.floatFeatures.put(_key8, _val9);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setFloatFeaturesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DENSE_FEATURES
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                                struct.denseFeatures = new HashMap<String, List<Double>>(2 * _map15.size);
                                String _key16;
                                List<Double> _val17;
                                for (int _i18 = 0; _i18 < _map15.size; ++_i18) {
                                    _key16 = iprot.readString();
                                    {
                                        org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                                        _val17 = new ArrayList<Double>(_list19.size);
                                        double _elem20;
                                        for (int _i21 = 0; _i21 < _list19.size; ++_i21) {
                                            _elem20 = iprot.readDouble();
                                            _val17.add(_elem20);
                                        }
                                        iprot.readListEnd();
                                    }
                                    struct.denseFeatures.put(_key16, _val17);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setDenseFeaturesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, FeatureVector struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.stringFeatures != null) {
                if (struct.isSetStringFeatures()) {
                    oprot.writeFieldBegin(STRING_FEATURES_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.stringFeatures.size()));
                        for (Map.Entry<String, Set<String>> _iter22 : struct.stringFeatures.entrySet()) {
                            oprot.writeString(_iter22.getKey());
                            {
                                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter22.getValue().size()));
                                for (String _iter23 : _iter22.getValue()) {
                                    oprot.writeString(_iter23);
                                }
                                oprot.writeSetEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.floatFeatures != null) {
                if (struct.isSetFloatFeatures()) {
                    oprot.writeFieldBegin(FLOAT_FEATURES_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.floatFeatures.size()));
                        for (Map.Entry<String, Map<String, Double>> _iter24 : struct.floatFeatures.entrySet()) {
                            oprot.writeString(_iter24.getKey());
                            {
                                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter24.getValue().size()));
                                for (Map.Entry<String, Double> _iter25 : _iter24.getValue().entrySet()) {
                                    oprot.writeString(_iter25.getKey());
                                    oprot.writeDouble(_iter25.getValue());
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.denseFeatures != null) {
                if (struct.isSetDenseFeatures()) {
                    oprot.writeFieldBegin(DENSE_FEATURES_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.denseFeatures.size()));
                        for (Map.Entry<String, List<Double>> _iter26 : struct.denseFeatures.entrySet()) {
                            oprot.writeString(_iter26.getKey());
                            {
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter26.getValue().size()));
                                for (double _iter27 : _iter26.getValue()) {
                                    oprot.writeDouble(_iter27);
                                }
                                oprot.writeListEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class FeatureVectorTupleSchemeFactory implements SchemeFactory {
        public FeatureVectorTupleScheme getScheme() {
            return new FeatureVectorTupleScheme();
        }
    }

    private static class FeatureVectorTupleScheme extends TupleScheme<FeatureVector> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, FeatureVector struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetStringFeatures()) {
                optionals.set(0);
            }
            if (struct.isSetFloatFeatures()) {
                optionals.set(1);
            }
            if (struct.isSetDenseFeatures()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetStringFeatures()) {
                {
                    oprot.writeI32(struct.stringFeatures.size());
                    for (Map.Entry<String, Set<String>> _iter28 : struct.stringFeatures.entrySet()) {
                        oprot.writeString(_iter28.getKey());
                        {
                            oprot.writeI32(_iter28.getValue().size());
                            for (String _iter29 : _iter28.getValue()) {
                                oprot.writeString(_iter29);
                            }
                        }
                    }
                }
            }
            if (struct.isSetFloatFeatures()) {
                {
                    oprot.writeI32(struct.floatFeatures.size());
                    for (Map.Entry<String, Map<String, Double>> _iter30 : struct.floatFeatures.entrySet()) {
                        oprot.writeString(_iter30.getKey());
                        {
                            oprot.writeI32(_iter30.getValue().size());
                            for (Map.Entry<String, Double> _iter31 : _iter30.getValue().entrySet()) {
                                oprot.writeString(_iter31.getKey());
                                oprot.writeDouble(_iter31.getValue());
                            }
                        }
                    }
                }
            }
            if (struct.isSetDenseFeatures()) {
                {
                    oprot.writeI32(struct.denseFeatures.size());
                    for (Map.Entry<String, List<Double>> _iter32 : struct.denseFeatures.entrySet()) {
                        oprot.writeString(_iter32.getKey());
                        {
                            oprot.writeI32(_iter32.getValue().size());
                            for (double _iter33 : _iter32.getValue()) {
                                oprot.writeDouble(_iter33);
                            }
                        }
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, FeatureVector struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
                    struct.stringFeatures = new HashMap<String, Set<String>>(2 * _map34.size);
                    String _key35;
                    Set<String> _val36;
                    for (int _i37 = 0; _i37 < _map34.size; ++_i37) {
                        _key35 = iprot.readString();
                        {
                            org.apache.thrift.protocol.TSet _set38 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                            _val36 = new HashSet<String>(2 * _set38.size);
                            String _elem39;
                            for (int _i40 = 0; _i40 < _set38.size; ++_i40) {
                                _elem39 = iprot.readString();
                                _val36.add(_elem39);
                            }
                        }
                        struct.stringFeatures.put(_key35, _val36);
                    }
                }
                struct.setStringFeaturesIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TMap _map41 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                    struct.floatFeatures = new HashMap<String, Map<String, Double>>(2 * _map41.size);
                    String _key42;
                    Map<String, Double> _val43;
                    for (int _i44 = 0; _i44 < _map41.size; ++_i44) {
                        _key42 = iprot.readString();
                        {
                            org.apache.thrift.protocol.TMap _map45 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                            _val43 = new HashMap<String, Double>(2 * _map45.size);
                            String _key46;
                            double _val47;
                            for (int _i48 = 0; _i48 < _map45.size; ++_i48) {
                                _key46 = iprot.readString();
                                _val47 = iprot.readDouble();
                                _val43.put(_key46, _val47);
                            }
                        }
                        struct.floatFeatures.put(_key42, _val43);
                    }
                }
                struct.setFloatFeaturesIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TMap _map49 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                    struct.denseFeatures = new HashMap<String, List<Double>>(2 * _map49.size);
                    String _key50;
                    List<Double> _val51;
                    for (int _i52 = 0; _i52 < _map49.size; ++_i52) {
                        _key50 = iprot.readString();
                        {
                            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                            _val51 = new ArrayList<Double>(_list53.size);
                            double _elem54;
                            for (int _i55 = 0; _i55 < _list53.size; ++_i55) {
                                _elem54 = iprot.readDouble();
                                _val51.add(_elem54);
                            }
                        }
                        struct.denseFeatures.put(_key50, _val51);
                    }
                }
                struct.setDenseFeaturesIsSet(true);
            }
        }
    }

}

